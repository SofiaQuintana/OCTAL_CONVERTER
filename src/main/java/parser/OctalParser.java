
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.Symbol;
import lexer.OctalLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class OctalParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public OctalParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public OctalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public OctalParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\010\004\005\005\006\006\010\001\002\000" +
    "\004\002\015\001\002\000\004\006\010\001\002\000\004" +
    "\006\010\001\002\000\004\002\ufffe\001\002\000\006\002" +
    "\ufffb\006\ufffb\001\002\000\006\002\ufffc\006\010\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\013\000\010\002\003\003\006\004\010\001\001\000" +
    "\002\001\001\000\006\003\013\004\010\001\001\000\006" +
    "\003\012\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\011\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OctalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OctalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OctalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private int index;

    public OctalParser(OctalLexer lexer) {
        super(lexer);
        index = 0;
    }

    public void syntax_error(Symbol s) {
        System.err.println("Error sintactico en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$OctalParser$actions {
  private final OctalParser parser;

  /** Constructor */
  CUP$OctalParser$actions(OctalParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$OctalParser$do_action_part00000000(
    int                        CUP$OctalParser$act_num,
    java_cup.runtime.lr_parser CUP$OctalParser$parser,
    java.util.Stack            CUP$OctalParser$stack,
    int                        CUP$OctalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OctalParser$result;

      /* select the action based on the action number */
      switch (CUP$OctalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= octal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)).value;
		RESULT = start_val;
              CUP$OctalParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)), ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OctalParser$parser.done_parsing();
          return CUP$OctalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // octal ::= PLUS digits 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).right;
		Integer dec = (Integer)((java_cup.runtime.Symbol) CUP$OctalParser$stack.peek()).value;
		 System.out.println(index+2 + "). El AST ha sido sintetizado en su totalidad. El producto final sintetizado resultante: " +  dec); 
                   System.out.println("\n###### El resultado decimal es: " + dec + " ######");  
              CUP$OctalParser$result = parser.getSymbolFactory().newSymbol("octal",0, ((java_cup.runtime.Symbol)CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)), ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), RESULT);
            }
          return CUP$OctalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // octal ::= MINUS digits 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).right;
		Integer dec = (Integer)((java_cup.runtime.Symbol) CUP$OctalParser$stack.peek()).value;
		 System.out.println(index+2 + "). El AST ha sido sintetizado en su totalidad. El producto final sintetizado resultante: " +  (dec*-1)); 
                   System.out.println("\n###### El resultado decimal es: " + (dec*-1) + " ######"); 
              CUP$OctalParser$result = parser.getSymbolFactory().newSymbol("octal",0, ((java_cup.runtime.Symbol)CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)), ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), RESULT);
            }
          return CUP$OctalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // octal ::= digits 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).right;
		Integer dec = (Integer)((java_cup.runtime.Symbol) CUP$OctalParser$stack.peek()).value;
		 System.out.println(index+2 + "). El AST ha sido sintetizado en su totalidad. El valor resultante es: " +  dec);
                   System.out.println("\n###### El resultado decimal es: " + dec + " ######");  
              CUP$OctalParser$result = parser.getSymbolFactory().newSymbol("octal",0, ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), RESULT);
            }
          return CUP$OctalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // digits ::= digit digits 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).right;
		Integer dec = (Integer)((java_cup.runtime.Symbol) CUP$OctalParser$stack.peek()).value;
		 index++;
                    RESULT = dec + (val * (int)Math.pow(8,index)); 
                    System.out.println(index+1 + "). Se realiza la multiplicacion del valor " + val + " por 8^" + index + " y se suma " +
                        "el resultante anterior " + dec + ". El producto sintetizado actual es: " +  RESULT);
                 
              CUP$OctalParser$result = parser.getSymbolFactory().newSymbol("digits",1, ((java_cup.runtime.Symbol)CUP$OctalParser$stack.elementAt(CUP$OctalParser$top-1)), ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), RESULT);
            }
          return CUP$OctalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // digits ::= digit 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$OctalParser$stack.peek()).value;
		 index = 0;
                    RESULT = val * (int)Math.pow(8,index); 
                    System.out.println(index+1 + "). Se realiza la multiplicacion del valor " + val + " por 8^" + index + ". El producto sintetizado actual es: " +  RESULT);
                  
              CUP$OctalParser$result = parser.getSymbolFactory().newSymbol("digits",1, ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), RESULT);
            }
          return CUP$OctalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // digit ::= DIGIT 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$OctalParser$stack.peek()).value;
		 RESULT = val; 
              CUP$OctalParser$result = parser.getSymbolFactory().newSymbol("digit",2, ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OctalParser$stack.peek()), RESULT);
            }
          return CUP$OctalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$OctalParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$OctalParser$do_action(
    int                        CUP$OctalParser$act_num,
    java_cup.runtime.lr_parser CUP$OctalParser$parser,
    java.util.Stack            CUP$OctalParser$stack,
    int                        CUP$OctalParser$top)
    throws java.lang.Exception
    {
              return CUP$OctalParser$do_action_part00000000(
                               CUP$OctalParser$act_num,
                               CUP$OctalParser$parser,
                               CUP$OctalParser$stack,
                               CUP$OctalParser$top);
    }
}

}
