package lexer;
import java_cup.runtime.*;
import parser.sym;

%%//Area Break

%public
%class OctalLexer
%cup
%cupdebug
%line
%column

/*Identifiers*/
Digit = [0-7]

LineTerminator = \r|\n|\r\n 
WhiteSpace = {LineTerminator} | [ \t\f\b]

%{  

    private Symbol symbol(int type) {
        return new Symbol(type, yyline+1, yycolumn+1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }

    private void error(String value, int line, int column) {
        System.out.println("Error lexico en caracter: " + value + ", linea: " + line + ", columna: " + column + ". Solo se aceptan numeros con digitos del 0-7");
    }
    
    private void invalid_symbol(String message) {
        System.out.println(message);
    }
%}

%%//Area Break

/*Lexical Rules*/

<YYINITIAL> {
    "+"                         { return symbol(sym.PLUS, "+");}
    "-"                          { return symbol(sym.MINUS, "-");}

    /* Others */
    {Digit}                    { return symbol(sym.DIGIT, Integer.parseInt(yytext()));}
    {WhiteSpace}        { /*do nothing*/ }
    .                              { error(yytext(), yyline+1, yycolumn+1); }
}
    [^] {invalid_symbol("Simbolo invalido <"+ yytext()+">");}
    <<EOF>>                     { return symbol(sym.EOF); } 
